# ============================ Node Configuration ==============================
#
# Website: https://quickwit.io
# Docs: https://quickwit.io/docs/configuration/node-config
#
# Configure AWS credentials: https://quickwit.io/docs/guides/aws-setup#aws-credentials
#
# -------------------------------- General settings --------------------------------
#
# Config file format version.
#
version: 0.6
#
# Node ID. Must be unique within a cluster. If not set, a random node ID is generated on each startup.
#
# node_id: node-1
#
# Quickwit opens three sockets.
# - for its HTTP server, hosting the UI and the REST API (TCP)
# - for its gRPC service (TCP)
# - for its Gossip cluster membership service (UDP)
#
# All three services are bound to the same host and a different port. The host can be an IP address or a hostname.
#
# Default HTTP server host is `127.0.0.1` and default HTTP port is 7280.
# The default host value was chosen to avoid exposing the node to the open-world without users' explicit consent.
# This allows for testing Quickwit in single-node mode or with multiple nodes running on the same host and listening
# on different ports. However, in cluster mode, using this value is never appropriate because it causes the node to
# ignore incoming traffic.
# There are two options to set up a node in cluster mode:
#   1. specify the node's hostname or IP
#   2. pass `0.0.0.0` and let Quickwit do its best to discover the node's IP (see `advertise_address`)
#
# listen_address: 127.0.0.1
# rest_listen_port: 7280
#
# IP address advertised by the node, i.e. the IP address that peer nodes should use to connect to the node for RPCs.
# The environment variable `QW_ADVERTISE_ADDRESS` can also be used to override this value.
# The default advertise address is `listen_address`. If `listen_address` is unspecified (`0.0.0.0`),
# Quickwit attempts to sniff the node's IP by scanning the available network interfaces.
# advertise_address: 192.168.0.42
#
# In order to join a cluster, one needs to specify a list of
# seeds to connect to. If no port is specified, Quickwit will assume
# the seeds are using the same port as the current node gossip port.
# By default, the peer seed list is empty.
#
# peer_seeds:
#   - quickwit-searcher-0.local
#   - quickwit-searcher-1.local:10000
#
# Path to directory where temporary data (caches, intermediate indexing data structures)
# is stored. Defaults to `./qwdata`.
#
# data_dir: /path/to/data/dir
#
# Metastore URI. Defaults to `data_dir/indexes#polling_interval=30s`,
# which is a file-backed metastore and mostly convenient for testing. A cluster would
# require a metastore backed by Amzon S3 or PostgreSQL.
#
metastore_uri: s3://leaks/indexes
# metastore_uri: postgres://username:password@host:port/db
#
# When using a file-backed metastore, the state of the metastore will be cached forever.
# If you are indexing and searching from different processes, it is possible to periodically
# refresh the state of the metastore on the searcher using the `polling_interval` hashtag.
#
# metastore_uri: s3://leaks/indexes#polling_interval=30s
# Amazon S3 charges $0.0004 per 1000 GET requests. Polling a metastore every 30 seconds will induce a cost of $0.04 per month and per index.
#
# Default index root URI, which defines where index data (splits) is stored,
# following the scheme `{default_index_root_uri}/{index-id}`. Defaults to `{data_dir}/indexes`.
#
default_index_root_uri: s3://leaks/indexes
#
# -------------------------------- Storage settings --------------------------------
#
storage:
  #   azure:
  #     account: ${QW_AZURE_STORAGE_ACCOUNT}
  #     access_key: ${QW_AZURE_STORAGE_ACCESS_KEY}
  #
  s3:
    endpoint: ${QW_S3_ENDPOINT}
    force_path_style_access: ${QW_S3_FORCE_PATH_STYLE_ACCESS:-true}
  # disable_multi_object_delete_requests: true
#
# -------------------------------- Metastore settings --------------------------------
#
# metastore:
#   postgres:
#     max_num_connections: 20
#
# -------------------------------- Indexer settings --------------------------------

indexer:
  enable_otlp_endpoint: ${QW_ENABLE_OTLP_ENDPOINT:-true}
#   split_store_max_num_bytes: 100G
#   split_store_max_num_splits: 1000
#   max_concurrent_split_uploads: 12
#
#
# -------------------------------- Ingest API settings ------------------------------
#
# ingest_api:
#   max_queue_memory_usage: 2GiB
#   max_queue_disk_usage: 4GiB
#
# -------------------------------- Searcher settings --------------------------------
#
# searcher:
#   fast_field_cache_capacity: 1G
#   split_footer_cache_capacity: 500M
#   max_num_concurrent_split_streams: 100
#   max_num_concurrent_split_searches: 100
#
# -------------------------------- Jaeger settings --------------------------------

# jaeger:
#   enable_endpoint: ${QW_ENABLE_JAEGER_ENDPOINT:-true}
